server:
  port: 8080

spring:
  application:
    # 需要参考配置中心的Data Id
    name: dcloud-link
  # Database
#  datasource:
#    type: com.alibaba.druid.pool.DruidDataSource
#    url: jdbc:mysql://123.249.98.26:3306/dcloud_account?characterEncoding=utf8&connectTimeout=10000&socketTimeout=30000&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    username: root
#    password: xdclass.net

  # 数据源 ds0 第一个数据库
  shardingsphere:
    datasource:
      name: ds0
      ds0:
        connectionTimeOutMilliseconds: 30000   # 连接超时时间（毫秒）
        idleTimeoutMilliseconds: 60000         # 空闲超时时间（毫秒）
        maintenanceIntervalMilliseconds: 30000 # 维护线程间隔时间（毫秒）
        maxLifetimeMilliseconds: 1800000       # 线程连接的最大存货时间（毫秒）
        maxPoolSize: 50                      # 连接池最大连接数
        minPoolSize: 50                      # 连接池最小连接数
        driver-class-name: com.mysql.cj.jdbc.Driver
        # jdbc-url: jdbc:mysql://123.249.98.26:3306/dcloud_account?characterEncoding=utf8&connectTimeout=10000&socketTimeout=30000&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
        url: jdbc:mysql://123.249.98.26:3306/dcloud_account?characterEncoding=utf8&connectTimeout=10000&socketTimeout=30000&autoReconnect=true&useSSL=false&allowPublicKeyRetrieval=true
        username: root
        password: xdclass.net
        # type: com.zaxxer.hikari.HikariDataSource
        type: com.alibaba.druid.pool.DruidDataSource   # 数据库连接池
    # 打印sql
    props:
        sql-show: true
    # 分库分表
    rules:
      sharding:
        # 表分片规则
        tables:
          # 需要分片的表
          traffic:
            # 实际数据存储在 traffic0 和 traffic1 两个表
            actual-data-nodes: ds0.traffic_$->{0..1}
            # 分表策略
            table-strategy:
              standard:
                # 指定了用于分片的字段
                sharding-column: account_no
                # 分表算法名称
                sharding-algorithm-name: table-inline
            # 主键生成策略
            key-generate-strategy:
              column: id
              key-generator-name: snowflake
        # 分片算法
        sharding-algorithms:
          # 分片算法名称
          table-inline:
            type: INLINE
            props:
              # 根据 account_no 字段的值与 2 取模的结果来决定数据应该存储在哪个表中
              algorithm-expression: traffic_$->{account_no % 2}
        # 主键生成策略
        key-generators:
          # 主键生成器名称
          snowflake:
            type: SNOWFLAKE
            props:
              # 区分不同机器
              worker-id: ${workerId}

  #  Redis
  redis:
    client-type: jedis
    host: 123.249.98.26
    password: xdclass.net
    port: 6379
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 100
        # 连接池中的最大空闲连接
        max-idle: 100
        # 连接池中的最小空闲连接
        min-idle: 100
        # 连接池最⼤阻塞等待时间（使⽤负值表示没有限制）
        max-wait: 60000

  # Nacos
  cloud:
    nacos:
      discovery:
        enabled: true
        server-addr: 123.249.98.26:8848
        username: nacos
        password: nacos

# Nacos 配置暴露所有的监控点
management:
  endpoints:
    web:
      exposure:
        include: "*"

# MybatisPlus
mybatis-plus:
  #  xml文件地址
  mapper-locations: classpath:mapper/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  # print sql logs.
    map-underscore-to-camel-case: true  # map underscore
    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler   # EnumHandler
  global-config:
    db-config:
      id-type: auto  # Global id, if variable id don't have @TableId.
      update-strategy: not_null # Just update not null value.
      # Logic Delete
      logic-delete-field: deleted  # Globally Logic deletion
      logic-delete-value: 1      # Deleted value is 1
      logic-not-delete-value: 0   # Not deleted value is 0

# Sms configuration
sms:
  app-code: 3d82217b4f67418a969968d160a63559
  template-id: JM1000372